Course ID,Course Title,Course Description,Upper Div,Skills
COMPSCI C8,Foundations of Data Science,"Foundations of data science from three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It delves into social and legal issues surrounding data analysis, including issues of privacy and data ownership.",False,"['data', 'datasets', 'privacy', 'computational', 'statistical', 'programming', 'economic', 'concepts', 'analyze', 'social']"
COMPSCI 10,The Beauty and Joy of Computing,"An introductory course for students with minimal prior exposure to computer science. Prepares students for future computer science courses and empowers them to utilize programming to solve problems in their field of study. Presents an overview of the history, great principles, and transformative applications of computer science, as well as a comprehensive introduction to programming. Topics include abstraction, recursion, algorithmic complexity, higher-order functions, concurrency, social implications of computing (privacy, education, algorithmic bias), and engaging research areas (data science, AI, HCI). Students will program in Snap! (a friendly graphical language) and Python, and will design and implement two projects of their choice.",False,"['programming', 'computing', 'python', 'program', 'algorithmic', 'introductory', 'snap', 'students', 'implement', 'applications']"
COMPSCI W10,The Beauty and Joy of Computing,"This course meets the programming prerequisite for 61A. An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.",False,"['programming', 'computing', 'students', 'applications', '61a', 'course', 'graphical', 'discovery', 'learn', 'introduction']"
COMPSCI 36,CS Scholars Seminar: The Educational Climate in CS & CS61A technical discussions,"Computer Science 36 is a seminar for CS Scholars who are concurrently taking CS61A: The Structure and Interpretation of Computer Programs. CS Scholars is a cohort-model program to provide support in exploring and potentially declaring a CS major for students with little to no computational background prior to coming to the university. CS 36 provides an introduction to the CS curriculum at UC Berkeley, and the overall CS landscape in both industry and academia—through the lens of accessibility and its relevance to diversity. Additionally, CS36 provides technical instruction to review concepts in CS61A, in order to support CS Scholars’ individual learning and success in the CS61A course.",False,"['cs36', 'cs61a', 'academia', 'programs', 'curriculum', 'computational', 'major', 'program', 'scholars', 'students']"
COMPSCI 39,Freshman/Sophomore Seminar,"Freshman and sophomore seminars offer lower division students the opportunity to explore an intellectual topic with a faculty member and a group of peers in a small-seminar setting. These seminars are offered in all campus departments; topics vary from department to department and from semester to semester. Enrollment limits are set by the faculty, but the suggested limit is 25.",False,"['seminars', 'seminar', 'semester', 'students', 'campus', 'freshman', 'sophomore', 'enrollment', 'topics', 'peers']"
COMPSCI 47A,Completion of Work in Computer Science 61A,"Implementation of generic operations. Streams and iterators. Implementation techniques for supporting functional, object-oriented, and constraint-based programming in the Scheme programming language. Together with 9D, 47A constitutes an abbreviated, self-paced version of 61A for students who have already taken a course equivalent to 61B.",False,"['implementation', 'streams', 'generic', 'iterators', 'operations', 'programming', 'scheme', 'an', '61a', '9d']"
COMPSCI 47B,Completion of Work in Computer Science 61B,"Iterators. Hashing, applied to strings and multi-dimensional structures. Heaps. Storage management. Design and implementation of a program containing hundreds of lines of code. Students who have completed a portion of the subject matter of COMPSCI 61B may, with consent of instructor, complete COMPSCI 61B in this self-paced course. Please note that students in the College of Engineering are required to receive additional permission from the College as well as the EECS department for the course to count in place of COMPSCI 61B.",False,"['iterators', 'hashing', 'heaps', 'storage', 'strings', 'implementation', 'students', 'program', 'compsci', 'structures']"
COMPSCI 47C,Completion of Work in Computer Science 61C,"MIPS instruction set simulation. The assembly and linking process. Caches and virtual memory. Pipelined computer organization. Students with sufficient partial credit in 61C may, with consent of instructor, complete the credit in this self-paced course.",False,"['mips', 'instruction', 'simulation', 'assembly', 'process', 'memory', 'students', 'pipelined', 'caches', 'virtual']"
COMPSCI 61A,The Structure and Interpretation of Computer Programs,"An introduction to programming and computer science focused on abstraction techniques as means to manage program complexity. Techniques include procedural abstraction; control abstraction using recursion, higher-order functions, generators, and streams; data abstraction using interfaces, objects, classes, and generic operators; and language abstraction using interpreters and macros. The course exposes students to programming paradigms, including functional, object-oriented, and declarative approaches. It includes an introduction to asymptotic analysis of algorithms. There are several significant programming projects.",False,"['abstraction', 'programming', 'complexity', 'algorithms', 'program', 'interpreters', 'macros', 'classes', 'recursion', 'approaches']"
COMPSCI 61B,Data Structures,"Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.",False,"['java', 'algorithms', 'sorting', 'lists', 'storage', 'arrays', 'searching', 'data', 'structures', 'hash']"
COMPSCI 61BL,Data Structures and Programming Methodology,"The same material as in 61B, but in a laboratory-based format.",False,"['material', '61b', 'laboratory', 'format', 'based', 'in', 'as', 'but', 'the', 'same']"
COMPSCI 61C,Great Ideas of Computer Architecture (Machine Structures),"The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.",False,"['architecture', 'architectural', 'computers', 'systems', 'internal', 'digital', 'design', 'machine', 'interrupts', 'memory']"
COMPSCI 70,Discrete Mathematics and Probability Theory,"Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.",False,"['applications', 'examples', 'cryptography', 'gcds', 'undecidability', 'primality', 'arithmetic', 'testing', 'numbers', 'modular']"
COMPSCI 84,Sophomore Seminar,"Sophomore seminars are small interactive courses offered by faculty members in departments all across the campus. Sophomore seminars offer opportunity for close, regular intellectual contact between faculty members and students in the crucial second year. The topics vary from department to department and semester to semester. Enrollment limited to 15 sophomores.",False,"['seminars', 'sophomores', 'sophomore', 'semester', 'students', 'campus', 'enrollment', 'topics', 'departments', 'members']"
COMPSCI C88C,Computational Structures in Data Science,"Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.",False,"['programming', 'computational', 'programs', 'program', 'abstraction', 'algorithms', 'complexity', 'c8', 'languages', 'systems']"
COMPSCI C100,Principles & Techniques of Data Science,"In this course, students will explore the data science lifecycle, including question formulation, data collection and cleaning, exploratory data analysis and visualization, statistical inference and prediction​, and decision-making.​ This class will focus on quantitative critical thinking​ and key principles and techniques needed to carry out this cycle. These include languages for transforming, querying and analyzing data; algorithms for machine learning methods including regression, classification and clustering; principles behind creating informative data visualizations; statistical concepts of measurement error and prediction; and techniques for scalable data processing.",True,"['data', 'visualizations', 'visualization', 'analyzing', 'quantitative', 'algorithms', 'learning', 'students', 'classification', 'science']"
COMPSCI 152,Computer Architecture and Engineering,"Instruction set architecture, microcoding, pipelining (simple and complex). Memory hierarchies and virtual memory. Processor parallelism: VLIW, vectors, multithreading. Multiprocessors.",True,"['multiprocessors', 'processor', 'architecture', 'multithreading', 'parallelism', 'pipelining', 'vliw', 'virtual', 'memory', 'hierarchies']"
COMPSCI 160,User Interface Design and Development,"The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.",True,"['usability', 'prototyping', 'design', 'interface', 'interfaces', 'methodologies', 'evaluation', 'tangible', 'tools', 'implementation']"
COMPSCI 161,Computer Security,"Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.",True,"['cryptographic', 'cryptography', 'security', 'encryption', 'firewalls', 'authentication', 'viruses', 'applications', 'protocols', 'programming']"
COMPSCI 162,Operating Systems and System Programming,"Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.",True,"['interprocess', 'programs', 'programming', 'program', 'systems', 'processes', 'operating', 'system', 'libraries', 'synchronization']"
COMPSCI 164,Programming Languages and Compilers,"Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.",True,"['compilers', 'programming', 'interpreters', 'implementation', 'parsing', 'assemblers', 'code', 'languages', 'scanning', 'semantic']"
COMPSCI 168,Introduction to the Internet: Architecture and Protocols,"This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).",True,"['protocols', 'tcp', 'routing', 'http', 'udp', 'ethernet', 'ip', 'internet', 'congestion', 'network']"
COMPSCI 169A,Introduction to Software Engineering,"Ideas and techniques for designing, developing, and modifying large software systems. Service-oriented architecture, behavior-driven design with user stories, cloud computing, test-driven development, automated testing, cost and quality metrics for maintainability and effort estimation, practical performance and security in software operations, design patterns and refactoring, specification and documentation, agile project team organization and management.",True,"['agile', 'software', 'refactoring', 'development', 'architecture', 'designing', 'systems', 'maintainability', 'design', 'documentation']"
COMPSCI 169L,Software Engineering Team Project,"Open-ended design project enhancing or creating software for real customers in an agile team setting. Teamwork coordination, effective customer meetings, pre- and post-iteration team meetings, running scrums and standups, technical communication. Contributing as a team to an open-source project; tools and workflows associated with open source collaboration, including fork-and-pull, rebase, upstream merge, continuous deployment & integration.",True,"['agile', 'scrums', 'teamwork', 'collaboration', 'software', 'design', 'meetings', 'project', 'team', 'workflows']"
COMPSCI 170,Efficient Algorithms and Intractable Problems,"Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.",True,"['algorithms', 'computation', 'turing', 'machines', 'trees', 'combinatorial', 'search', 'deterministic', 'models', 'techniques']"
COMPSCI 171,Cryptography,"Cryptography or cryptology is the science of designing algorithms and protocols for enabling parties to communicate and compute securely in an untrusted environment (e.g. secure communication, digital signature, etc.) Over the last four decades, cryptography has transformed from an ad hoc collection of mysterious tricks into a rigorous science based on firm complexity-theoretic foundations. This modern complexity-theoretic approach to cryptography will be the focus. E.g., in the context of encryption we will begin by giving a precise mathematical definition for what it means to be a secure encryption scheme and then give a construction (realizing this security notion) assuming various computational hardness assumptions (e.g. factoring).",True,"['cryptography', 'cryptology', 'encryption', 'complexity', 'securely', 'security', 'secure', 'algorithms', 'computational', 'mathematical']"
COMPSCI 172,Computability and Complexity,"Finite automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook's theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.",True,"['automata', 'turing', 'complexity', 'nondeterministic', 'randomness', 'machines', 'completeness', 'computation', 'undecidable', 'finite']"
COMPSCI 174,Combinatorics and Discrete Probability,"Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev's inequality, Chernov bounds. Birthday paradox, coupon collector's problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.",True,"['probabilistic', 'permutations', 'computations', 'hashing', 'exclusion', 'entropy', 'combinations', 'generating', 'graphs', 'random']"
COMPSCI 176,Algorithms for Computational Biology,"Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.",True,"['phylogenetics', 'algorithms', 'genome', 'rna', 'biology', 'computational', 'suffix', 'markov', 'trees', 'pattern']"
COMPSCI C176,Algorithms for Computational Biology,"This course will provide familiarity with algorithms and probabilistic models that arise in various computational biology applications, such as suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, hidden Markov models, gene finding, motif finding, linear/logistic regression, random forests, convolutional neural networks, genome-wide association studies, pathogenicity prediction, and sequence-to-epigenome prediction.",True,"['phylogenetics', 'genome', 'biology', 'algorithms', 'gene', 'computational', 'epigenome', 'pathogenicity', 'forests', 'pattern']"
COMPSCI C177,Algorithmic Economics,"The class provides an introduction to algorithmic questions in economic design. The class will cover problems of public goods and social choice, as well as allocative questions and private consumption. The focus is on normative questions: From the perspective of social goals, these are efficiency, fairness, and equity. In terms of private goals, the focus is on revenue maximization. The course will cover voting, fair division, pricing and market mechanisms. There is an emphasis on the algorithmic questions that arise naturally in economic design.",True,"['algorithmic', 'economic', 'pricing', 'consumption', 'maximization', 'normative', 'design', 'market', 'goods', 'efficiency']"
COMPSCI 180,Intro to Computer Vision and Computational Photography,"This advanced undergraduate course introduces students to computing with visual data (images and video). We will cover acquisition, representation, and manipulation of visual information from digital photographs (image processing), image analysis and visual understanding (computer vision), and image synthesis (computational photography). Key algorithms will be presented, ranging from classical to contemporary, with an emphasis on using these techniques to build practical systems. The hands-on emphasis will be reflected in the programming assignments, where students will acquire their own images and develop, largely from scratch, image analysis and synthesis tools for real-world applications.",True,"['photographs', 'photography', 'images', 'programming', 'computing', 'visual', 'image', 'computational', 'algorithms', 'vision']"
COMPSCI C182,"Designing, Visualizing and Understanding Deep Neural Networks","Deep Networks have revolutionized computer vision, language technology, robotics and control. They have growing impact in many other areas of science and engineering. They do not however, follow a closed or compact set of theoretical principles. In Yann Lecun's words they require ""an interplay between intuitive insights, theoretical modeling,",True,"['networks', 'deep', 'yann', 'intuitive', 'lecun', 'insights', 'modeling', 'theoretical', 'vision', 'technology']"
COMPSCI 184,Foundations of Computer Graphics,"Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.",True,"['rendering', 'modeling', 'graphics', 'geometrical', 'surface', 'geometry', 'lighting', 'reflection', 'models', 'objects']"
COMPSCI 185,"Deep Reinforcement Learning, Decision Making, and Control","This course will cover the intersection of control, reinforcement learning, and deep learning. This course will provide an advanced treatment of the reinforcement learning formalism, the most critical model-free reinforcement learning algorithms (policy gradients, value function and Q-function learning, and actor-critic), a discussion of model-based reinforcement learning algorithms, an overview of imitation learning, and a range of advanced topics, including exploration, model-based learning with video prediction, transfer learning, multi-task learning, and meta-learning. Homework assignments will cover imitation learning, policy gradients, Q-learning, and model-based reinforcement learning, as well as a final project.",True,"['reinforcement', 'learning', 'assignments', 'exploration', 'overview', 'critic', 'topics', 'control', 'advanced', 'policy']"
COMPSCI 186,Introduction to Database Systems,"Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.",True,"['database', 'relational', 'access', 'data', 'application', 'programming', 'transaction', 'query', 'implementation', 'processing']"
COMPSCI C187,Data Engineering,"This course will cover the principles and practices of managing data at scale, with a focus on use cases in data analysis and machine learning. We will cover the entire life cycle of data management and science, ranging from data preparation to exploration, visualization and analysis, to machine learning and collaboration, with a focus on ensuring reliable, scalable operationalization.",True,"['data', 'managing', 'operationalization', 'management', 'learning', 'practices', 'scalable', 'visualization', 'analysis', 'science']"
COMPSCI 188,Introduction to Artificial Intelligence,"Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.",True,"['topics', 'systems', 'robotics', 'design', 'intelligent', 'ideas', 'planning', 'knowledge', 'techniques', 'machine']"
COMPSCI 189,Introduction to Machine Learning,"Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.",True,"['algorithms', 'supervised', 'clustering', 'models', 'probabilistic', 'topics', 'learning', 'regression', 'applications', 'networks']"
COMPSCI C191,Introduction to Quantum Computing,"This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering.",True,"['quantum', 'cryptography', 'nanoscale', 'multidisciplinary', 'informational', 'computational', 'physical', 'complexity', 'algorithms', 'introduction']"
COMPSCI 194,Special Topics,Topics will vary semester to semester. See the Computer Science Division announcements.,True,"['semester', 'topics', 'announcements', 'science', 'division', 'will', 'see', 'vary', 'to', 'the']"
COMPSCI 195,Social Implications of Computer Technology,Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.,True,"['topics', 'discussions', 'students', 'pornography', 'technological', 'electronic', 'censorship', 'privacy', 'ethics', 'community']"
COMPSCI H195,Honors Social Implications of Computer Technology,Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students may lead discussions on additional topics.,True,"['topics', 'discussions', 'students', 'pornography', 'technological', 'electronic', 'censorship', 'privacy', 'ethics', 'community']"
COMPSCI H196A,Senior Honors Thesis Research,"Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.",True,"['thesis', 'semesters', 'h196a', 'h196b', 'graded', 'units', 'electrical', 'engineering', 'credit', 'college']"
COMPSCI H196B,Senior Honors Thesis Research,"Thesis work under the supervision of a faculty member. To obtain credit the student must, at the end of two semesters, submit a satisfactory thesis to the Electrical Engineering and Computer Science department archive. A total of four units must be taken. The units many be distributed between one or two semesters in any way. H196A-H196B count as graded technical elective units, but may not be used to satisfy the requirement for 27 upper division technical units in the College of Letters and Science with a major in Computer Science.",True,"['thesis', 'semesters', 'h196a', 'h196b', 'graded', 'units', 'electrical', 'engineering', 'credit', 'college']"
COMPSCI 197,Field Study,"Students take part in organized individual field sponsored programs with off-campus companies or tutoring/mentoring relevant to specific aspects and applications of computer science on or off campus. Note Summer CPT or OPT students: written report required. Course does not count toward major requirements, but will be counted in the cumulative units toward graduation.",True,"['students', 'programs', 'campus', 'requirements', 'cpt', 'tutoring', 'graduation', 'mentoring', 'applications', 'major']"
COMPSCI 198,Directed Group Studies for Advanced Undergraduates,"Group study of selected topics in Computer Sciences, usually relating to new developments.",True,"['topics', 'developments', 'study', 'sciences', 'group', 'new', 'relating', 'selected', 'in', 'usually']"
COMPSCI 199,Supervised Independent Study,Supervised independent study. Enrollment restrictions apply.,True,"['enrollment', 'study', 'restrictions', 'supervised', 'independent', 'apply']"
